{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","services/user.ts","components/TodoForm.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","email","name","className","href","TodoInfo","todo","id","completed","title","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","TodoForm","onSubmit","useState","setTitle","isTitleEmpty","setIsTitleEmpty","setUserId","userNameError","setUserNameError","event","preventDefault","action","method","htmlFor","type","placeholder","value","onChange","target","initialTodos","getNewTodoId","Math","max","App","setTodos","newTodo","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a683ea32.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    completed,\n    title,\n    user,\n  } = todo;\n\n  return (\n    <article data-id={id} className={`TodoInfo ${completed && 'TodoInfo--completed'}`}>\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo\n        key={todo.id}\n        todo={todo}\n      />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../api/users';\n\nexport function getUserById(userId: number) {\n  return usersFromServer.find(user => user.id === userId)\n    || null;\n}\n","import React, { useState } from 'react';\nimport { Todo } from '../types/Todo';\nimport { getUserById } from '../services/user';\nimport usersFromServer from '../api/users';\n\ntype Props = {\n  onSubmit: (todo: Todo) => void;\n};\n\nexport const TodoForm: React.FC<Props> = ({ onSubmit }) => {\n  const [title, setTitle] = useState('');\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [userId, setUserId] = useState(0);\n  const [userNameError, setUserNameError] = useState(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setIsTitleEmpty(false);\n  };\n\n  const handleUserNameChange\n    = (event: React.ChangeEvent<HTMLSelectElement>) => {\n      setUserId(+event.target.value);\n      setUserNameError(false);\n    };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setIsTitleEmpty(!title);\n    setUserNameError(!userId);\n\n    if (!title || !userId) {\n      return;\n    }\n\n    onSubmit({\n      id: 0,\n      title,\n      completed: false,\n      userId,\n      user: getUserById(userId),\n    });\n\n    setTitle('');\n    setUserId(0);\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      action=\"/api/todos\"\n      method=\"POST\"\n    >\n\n      <div className=\"field\">\n        <label htmlFor=\"todoTitle\">Title: </label>\n        <input\n          type=\"text\"\n          data-cy=\"titleInput\"\n          id=\"todoTitle\"\n          placeholder=\"Enter a title\"\n          value={title}\n          onChange={handleTitleChange}\n        />\n\n        {isTitleEmpty && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <label htmlFor=\"todoUser\">User: </label>\n        <select\n          id=\"todoUser\"\n          data-cy=\"userSelect\"\n          value={userId}\n          onChange={handleUserNameChange}\n        >\n          <option value=\"0\">Choose a user</option>\n\n          {usersFromServer.map(user => (\n            <option key={user.id} value={user.id}>{user.name}</option>\n          ))}\n        </select>\n\n        {userNameError && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport './App.scss';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\nimport { getUserById } from './services/user';\nimport { TodoForm } from './components/TodoForm';\n\nexport const initialTodos = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nfunction getNewTodoId(todos: Todo[]) {\n  const maxId = Math.max(...todos.map(todo => todo.id));\n\n  return maxId + 1;\n}\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(initialTodos);\n\n  const addTodo = (todo: Todo) => {\n    const newTodo = {\n      ...todo,\n      id: getNewTodoId(todos),\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm onSubmit={addTodo} />\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}